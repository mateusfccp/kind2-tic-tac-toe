right:       _ = (Pair/new _ _ 1 0)
down:        _ = (Pair/new _ _ 0 1)
bottomRight: _ = (Pair/new _ _ 1 1)
bottomLeft:  _ = (Pair/new _ _ (U48/neg 1) 1)

winner
- board: (Board _)
: (Maybe Player)

(List/fold Move (Maybe Player)
  位move 位current match current {
    Maybe/some: current
    Maybe/none:
      // Here we should fork for all four directions, but AFAIK we can't fork
      // in Kind, only in Bend
      use c = 位direction 位current match current {
        Bool/true: Bool/true
	Bool/false: (Board/check move 2 board direction)
      }
      
      let winner = (List/fold _ _ c Bool/false [right, down, bottomRight, bottomLeft])
      // let winner = (Board/check move 2 right board)
      match winner {
        Bool/true: match move {
	  Move/new: (Maybe/some _ move.player)
	}
	Bool/false: (Maybe/none _)
      }
  }

  (Maybe/none Player)
  board)
