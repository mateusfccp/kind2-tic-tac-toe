const App = (S_1) => null;
const App_new = (S_1) => (D_2) => (init_3) => (when_4) => (debug_5) => (P_6) => (new_7) => new_7(init_3)(when_4)(debug_5);
const Board = (A_1) => List(Move);
const Board_sort = (board_1) => List_qsort(null)(board_1)((a_2) => (b_3) => Cell_lt(Move_getCell(a_2))(Move_getCell(b_3)))((a_2) => (b_3) => Cell_gte(Move_getCell(a_2))(Move_getCell(b_3)));
const Bool = null;
const Bool_and = (a_1) => (b_2) => (() => { const a_P_3 = null; return (() => { const a_true_4 = b_2; return (() => { const a_false_5 = Bool_false; return Bool_match(a_P_3)(a_true_4)(a_false_5)(a_1); })(); })(); })();
const Bool_false = (P_1) => (t_2) => (f_3) => f_3;
const Bool_if = (P_1) => (b_2) => (t_3) => (f_4) => (() => { const b_P_5 = null; return (() => { const b_true_6 = t_3; return (() => { const b_false_7 = f_4; return Bool_match(b_P_5)(b_true_6)(b_false_7)(b_2); })(); })(); })();
const Bool_match = (P_1) => (t_2) => (f_3) => (b_4) => b_4(P_1)(t_2)(f_3);
const Bool_not = (x_1) => (() => { const x_P_2 = null; return (() => { const x_true_3 = Bool_false; return (() => { const x_false_4 = Bool_true; return Bool_match(x_P_2)(x_true_3)(x_false_4)(x_1); })(); })(); })();
const Bool_true = (P_1) => (t_2) => (f_3) => t_2;
const Cell = (A_1) => Pair(null)(null);
const Cell_eq = (a_1) => (b_2) => (() => { const a_P_3 = null; return (() => { const a_new_4 = (a_fst_4) => (a_snd_5) => (() => { const b_P_6 = null; return (() => { const b_new_7 = (b_fst_7) => (b_snd_8) => (() => { const fstEq_9 = U48_to_bool(Math.floor(a_fst_4 === b_fst_7)); return (() => { const sndEq_10 = U48_to_bool(Math.floor(a_snd_5 === b_snd_8)); return Bool_and(fstEq_9)(sndEq_10); })(); })(); return Pair_match(null)(null)(b_P_6)(b_new_7)(b_2); })(); })(); return Pair_match(null)(null)(a_P_3)(a_new_4)(a_1); })(); })();
const Cell_gte = (a_1) => (b_2) => Bool_not(Cell_lt(a_1)(b_2));
const Cell_lt = (a_1) => (b_2) => (() => { const a_P_3 = null; return (() => { const a_new_4 = (a_fst_4) => (a_snd_5) => (() => { const b_P_6 = null; return (() => { const b_new_7 = (b_fst_7) => (b_snd_8) => (() => { const sndLt_9 = U48_to_bool(Math.floor(a_snd_5 < b_snd_8)); return Bool_if(null)(sndLt_9)(Bool_true)((() => { const fstLt_10 = U48_to_bool(Math.floor(b_snd_8 < a_snd_5)); return Bool_if(null)(fstLt_10)(Bool_false)(U48_to_bool(Math.floor(a_fst_4 < b_fst_7))); })()); })(); return Pair_match(null)(null)(b_P_6)(b_new_7)(b_2); })(); })(); return Pair_match(null)(null)(a_P_3)(a_new_4)(a_1); })(); })();
const Char = null;
const Direction = null;
const Direction_down = (P_1) => (left_2) => (up_3) => (right_4) => (down_5) => down_5;
const Direction_fromKeycode = (keycode_1) => U48_if(null)(Math.floor(keycode_1 === 37))(Maybe_some(null)(Direction_left))(U48_if(null)(Math.floor(keycode_1 === 38))(Maybe_some(null)(Direction_up))(U48_if(null)(Math.floor(keycode_1 === 39))(Maybe_some(null)(Direction_right))(U48_if(null)(Math.floor(keycode_1 === 40))(Maybe_some(null)(Direction_down))(Maybe_none(null)))));
const Direction_left = (P_1) => (left_2) => (up_3) => (right_4) => (down_5) => left_2;
const Direction_match = (P_1) => (left_2) => (up_3) => (right_4) => (down_5) => (direction_6) => direction_6(P_1)(left_2)(up_3)(right_4)(down_5);
const Direction_right = (P_1) => (left_2) => (up_3) => (right_4) => (down_5) => right_4;
const Direction_up = (P_1) => (left_2) => (up_3) => (right_4) => (down_5) => up_3;
const GameState = null;
const GameState_cellAvailable = (state_1) => (() => { const state_P_2 = null; return (() => { const state_inProgress_3 = (state_currentPlayer_3) => (state_cursorPosition_4) => (state_board_5) => (() => { const occupiedCells_6 = List_map(Move)(Cell(null))(state_board_5)(Move_getCell); return (() => { const cellOccupied_7 = List_find(null)((cell_7) => Cell_eq(cell_7)(state_cursorPosition_4))(occupiedCells_6); return (() => { const cellOccupied_P_8 = null; return (() => { const cellOccupied_some_9 = (cellOccupied_value_9) => Bool_false; return (() => { const cellOccupied_none_10 = Bool_true; return Maybe_match(null)(cellOccupied_P_8)(cellOccupied_some_9)(cellOccupied_none_10)(cellOccupied_7); })(); })(); })(); })(); })(); return (() => { const state_draw_4 = (state_board_4) => Bool_false; return (() => { const state_winner_5 = (state_player_5) => (state_board_6) => Bool_false; return GameState_match(state_P_2)(state_inProgress_3)(state_draw_4)(state_winner_5)(state_1); })(); })(); })(); })();
const GameState_draw = (board_1) => (P_2) => (inProgress_3) => (draw_4) => (winner_5) => draw_4(board_1);
const GameState_inProgress = (currentPlayer_1) => (cursorPosition_2) => (board_3) => (P_4) => (inProgress_5) => (draw_6) => (winner_7) => inProgress_5(currentPlayer_1)(cursorPosition_2)(board_3);
const GameState_match = (P_1) => (inProgress_2) => (draw_3) => (winner_4) => (gameState_5) => gameState_5(P_1)(inProgress_2)(draw_3)(winner_4);
const GameState_moveCursor = (state_1) => (direction_2) => (() => { const forward_3 = (n_3) => Math.floor(Math.floor(n_3 + 1) % 3); return (() => { const backward_4 = (n_4) => (() => { const neg1_5 = Math.floor(0 - 1); return (() => { const n_6 = Math.floor(n_4 - 1); return U48_if(null)(Math.floor(n_6 === neg1_5))(2)(n_6); })(); })(); return (() => { const state_P_5 = null; return (() => { const state_inProgress_6 = (state_currentPlayer_6) => (state_cursorPosition_7) => (state_board_8) => (() => { const position_9 = (() => { const direction_P_9 = null; return (() => { const direction_left_10 = Pair_mapFst(null)(null)(null)(state_cursorPosition_7)(backward_4); return (() => { const direction_up_11 = Pair_mapSnd(null)(null)(null)(state_cursorPosition_7)(backward_4); return (() => { const direction_right_12 = Pair_mapFst(null)(null)(null)(state_cursorPosition_7)(forward_3); return (() => { const direction_down_13 = Pair_mapSnd(null)(null)(null)(state_cursorPosition_7)(forward_3); return Direction_match(direction_P_9)(direction_left_10)(direction_up_11)(direction_right_12)(direction_down_13)(direction_2); })(); })(); })(); })(); })(); return GameState_inProgress(state_currentPlayer_6)(position_9)(state_board_8); })(); return (() => { const state_draw_7 = (state_board_7) => state_1; return (() => { const state_winner_8 = (state_player_8) => (state_board_9) => state_1; return GameState_match(state_P_5)(state_inProgress_6)(state_draw_7)(state_winner_8)(state_1); })(); })(); })(); })(); })(); })();
const GameState_new = (A_1) => (() => { const cursorInitialPosition_2 = Pair_new(null)(null)(0)(0); return GameState_inProgress(Player_x)(cursorInitialPosition_2)(List_nil(null)); })();
const GameState_putMove = (state_1) => (() => { const state_P_2 = null; return (() => { const state_inProgress_3 = (state_currentPlayer_3) => (state_cursorPosition_4) => (state_board_5) => (() => { const cellAvailable_6 = GameState_cellAvailable(state_1); return (() => { const cellAvailable_P_7 = null; return (() => { const cellAvailable_true_8 = (() => { const player_8 = Player_switch(state_currentPlayer_3); return (() => { const move_9 = Move_new(state_currentPlayer_3)(state_cursorPosition_4); return (() => { const board_10 = List_concat(null)(state_board_5)(List_cons(null)(move_9)(List_nil(null))); return (() => { const board_11 = Board_sort(board_10); return GameState_inProgress(player_8)(state_cursorPosition_4)(board_11); })(); })(); })(); })(); return (() => { const cellAvailable_false_9 = state_1; return Bool_match(cellAvailable_P_7)(cellAvailable_true_8)(cellAvailable_false_9)(cellAvailable_6); })(); })(); })(); })(); return (() => { const state_draw_4 = (state_board_4) => state_1; return (() => { const state_winner_5 = (state_player_5) => (state_board_6) => state_1; return GameState_match(state_P_2)(state_inProgress_3)(state_draw_4)(state_winner_5)(state_1); })(); })(); })(); })();
const GameState_winner = (player_1) => (board_2) => (P_3) => (inProgress_4) => (draw_5) => (winner_6) => winner_6(player_1)(board_2);
const List = (T_1) => null;
const List_concat = (T_1) => (xs_2) => (ys_3) => (() => { const xs_P_4 = null; return (() => { const xs_cons_5 = (xs_head_5) => (xs_tail_6) => List_cons(null)(xs_head_5)(List_concat(null)(xs_tail_6)(ys_3)); return (() => { const xs_nil_6 = ys_3; return List_match(null)(xs_P_4)(xs_cons_5)(xs_nil_6)(xs_2); })(); })(); })();
const List_cons = (T_1) => (head_2) => (tail_3) => (P_4) => (cons_5) => (nil_6) => cons_5(head_2)(tail_3);
const List_filter = (A_1) => (cond_2) => (list_3) => (() => { const list_P_4 = null; return (() => { const list_cons_5 = (list_head_5) => (list_tail_6) => (() => { const test_7 = cond_2(list_head_5); return (() => { const head_8 = (() => { const test_P_8 = (test_8) => null; return (() => { const test_true_9 = List_cons(null)(list_head_5); return (() => { const test_false_10 = (x_10) => x_10; return Bool_match(test_P_8)(test_true_9)(test_false_10)(test_7); })(); })(); })(); return (() => { const tail_9 = List_filter(null)(cond_2)(list_tail_6); return head_8(tail_9); })(); })(); })(); return (() => { const list_nil_6 = List_nil(null); return List_match(null)(list_P_4)(list_cons_5)(list_nil_6)(list_3); })(); })(); })();
const List_find = (A_1) => (fn_2) => (xs_3) => (() => { const xs_P_4 = null; return (() => { const xs_cons_5 = (xs_head_5) => (xs_tail_6) => (() => { const result_7 = fn_2(xs_head_5); return (() => { const result_P_8 = null; return (() => { const result_true_9 = Maybe_some(null)(xs_head_5); return (() => { const result_false_10 = List_find(null)(fn_2)(xs_tail_6); return Bool_match(result_P_8)(result_true_9)(result_false_10)(result_7); })(); })(); })(); })(); return (() => { const xs_nil_6 = Maybe_none(null); return List_match(null)(xs_P_4)(xs_cons_5)(xs_nil_6)(xs_3); })(); })(); })();
const List_map = (A_1) => (B_2) => (xs_3) => (fn_4) => (() => { const xs_P_5 = null; return (() => { const xs_cons_6 = (xs_head_6) => (xs_tail_7) => (() => { const head_8 = fn_4(xs_head_6); return (() => { const tail_9 = List_map(null)(null)(xs_tail_7)(fn_4); return List_cons(null)(head_8)(tail_9); })(); })(); return (() => { const xs_nil_7 = List_nil(null); return List_match(null)(xs_P_5)(xs_cons_6)(xs_nil_7)(xs_3); })(); })(); })();
const List_match = (A_1) => (P_2) => (c_3) => (n_4) => (xs_5) => xs_5(P_2)(c_3)(n_4);
const List_nil = (T_1) => (P_2) => (cons_3) => (nil_4) => nil_4;
const List_qsort = (A_1) => (list_2) => (lt_3) => (gte_4) => (() => { const list_P_5 = null; return (() => { const list_cons_6 = (list_head_6) => (list_tail_7) => (() => { const lesser_8 = List_filter(null)(gte_4(list_head_6))(list_tail_7); return (() => { const greater_9 = List_filter(null)(lt_3(list_head_6))(list_tail_7); return List_concat(null)(List_qsort(null)(lesser_8)(lt_3)(gte_4))(List_cons(null)(list_head_6)(List_qsort(null)(greater_9)(lt_3)(gte_4))); })(); })(); return (() => { const list_nil_7 = List_nil(null); return List_match(null)(list_P_5)(list_cons_6)(list_nil_7)(list_2); })(); })(); })();
const Maybe = (T_1) => null;
const Maybe_match = (A_1) => (P_2) => (s_3) => (n_4) => (ma_5) => ma_5(P_2)(s_3)(n_4);
const Maybe_none = (T_1) => (P_2) => (some_3) => (none_4) => none_4;
const Maybe_some = (T_1) => (value_2) => (P_3) => (some_4) => (none_5) => some_4(value_2);
const Move = null;
const Move_getCell = (move_1) => (() => { const move_P_2 = null; return (() => { const move_new_3 = (move_player_3) => (move_cell_4) => move_cell_4; return Move_match(move_P_2)(move_new_3)(move_1); })(); })();
const Move_match = (P_1) => (new_2) => (move_3) => move_3(P_1)(new_2);
const Move_new = (player_1) => (cell_2) => (P_3) => (new_4) => new_4(player_1)(cell_2);
const Nat = null;
const Nat_succ = (n_1) => (P_2) => (succ_3) => (zero_4) => succ_3(n_1);
const Nat_zero = (P_1) => (succ_2) => (zero_3) => zero_3;
const Pair = (A_1) => (B_2) => null;
const Pair_mapFst = (A_1) => (B_2) => (T_3) => (p_4) => (f_5) => (() => { const p_P_6 = null; return (() => { const p_new_7 = (p_fst_7) => (p_snd_8) => Pair_new(T_3)(B_2)(f_5(p_fst_7))(p_snd_8); return Pair_match(null)(null)(p_P_6)(p_new_7)(p_4); })(); })();
const Pair_mapSnd = (A_1) => (B_2) => (T_3) => (p_4) => (f_5) => (() => { const p_P_6 = null; return (() => { const p_new_7 = (p_fst_7) => (p_snd_8) => Pair_new(A_1)(T_3)(p_fst_7)(f_5(p_snd_8)); return Pair_match(null)(null)(p_P_6)(p_new_7)(p_4); })(); })();
const Pair_match = (A_1) => (B_2) => (P_3) => (new_4) => (pair_5) => pair_5(P_3)(new_4);
const Pair_new = (A_1) => (B_2) => (a_3) => (b_4) => (P_5) => (new_6) => new_6(a_3)(b_4);
const Player = null;
const Player_match = (P_1) => (x_2) => (o_3) => (p_4) => p_4(P_1)(x_2)(o_3);
const Player_o = (P_1) => (x_2) => (o_3) => o_3;
const Player_switch = (player_1) => (() => { const player_P_2 = null; return (() => { const player_x_3 = Player_o; return (() => { const player_o_4 = Player_x; return Player_match(player_P_2)(player_x_3)(player_o_4)(player_1); })(); })(); })();
const Player_x = (P_1) => (x_2) => (o_3) => x_2;
const String = List(Char);
const String_cons = (head_1) => (tail_2) => (P_3) => (cons_4) => (nil_5) => cons_4(head_1)(tail_2);
const String_nil = (P_1) => (cons_2) => (nil_3) => nil_3;
const U48_if = (P_1) => (x_2) => (t_3) => (f_4) => (() => { const x_5_1 = x_2; switch (x_5_1) { case 0: return f_4; default: return ((x_5_1 => (() => { const x_1_6 = x_5_1; return t_3; })())((x_5_1) - 1)); } })();
const U48_to_bool = (x_1) => (() => { const x_2_1 = x_1; switch (x_2_1) { case 0: return Bool_false; default: return ((x_2_1 => (() => { const x_1_3 = x_2_1; return Bool_true; })())((x_2_1) - 1)); } })();
const main = (() => { const init_1 = GameState_new(null); return (() => { const when_2 = (key_2) => (state_3) => (() => { const state_P_4 = null; return (() => { const state_inProgress_5 = (state_currentPlayer_5) => (state_cursorPosition_6) => (state_board_7) => U48_if(null)(Math.floor(key_2 === 13))(GameState_putMove(state_3))(U48_if(null)(Math.floor(key_2 === 88))(GameState_inProgress(Player_x)(state_cursorPosition_6)(state_board_7))(U48_if(null)(Math.floor(key_2 === 79))(GameState_inProgress(Player_o)(state_cursorPosition_6)(state_board_7))((() => { const direction_8 = Direction_fromKeycode(key_2); return (() => { const direction_P_9 = null; return (() => { const direction_some_10 = (direction_value_10) => GameState_moveCursor(state_3)(direction_value_10); return (() => { const direction_none_11 = state_3; return Maybe_match(null)(direction_P_9)(direction_some_10)(direction_none_11)(direction_8); })(); })(); })(); })()))); return (() => { const state_draw_6 = (state_board_6) => state_3; return (() => { const state_winner_7 = (state_player_7) => (state_board_8) => state_3; return GameState_match(state_P_4)(state_inProgress_5)(state_draw_6)(state_winner_7)(state_3); })(); })(); })(); })(); return App_new(null)(null)(init_1)(when_2)(List_nil(null)); })(); })();
const o = (P_1) => (x_2) => (o_3) => o_3;
const x = (P_1) => (x_2) => (o_3) => x_2;

